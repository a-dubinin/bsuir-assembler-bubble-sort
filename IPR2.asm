; Программа сортировки одномерного массива по возрастанию
; Разработчик - Дубинин А. В.
; 23.05.2016

.model small ; модель памяти small
.386         ; режим работы микропроцессора

; сегмент стека (занимает 256 байтов)
.stack 256

; сегмент данных
.data
    msgSrcArr db 'Source array: $'     ; сообщение о выводе исходного массива
    msgAscArr db 'ASC sorted array: $' ; сообщение о выводе отсортированного массива

    arr db 8,5,2,1,9,8,3,7,6,2,4       ; исходный массив
    arrLen = $ - arr                   ; размер исходного массива
    separator db ',$'                  ; разделитель элементов массива для вывода
    i dw 0                             ; параметр цикла для сортировки

    br db 10,13,'$'                    ; переменная для перевода строки

; сегмент кода
.code
main:                    ; метка начала программы
    mov ax,@data         ; занесение адреса сегмента данных в регистр ax
    mov ds,ax            ; копирование содержимого регистра ax в регистр dx
    xor ax,ax            ; обнуление регистра ax

    lea dx,msgSrcArr     ; занесение в dx смещения переменной msgSrcArr
    call DisplayMsg      ; вызов процедуры вывода сообщения (msgSrcArr)
    call DisplayArr      ; вызов процедуры вывода массива

    call SortArray       ; вызов процедуры сортировки массива

    call NewLine         ; вызов процедуры перевода строки
    lea dx,msgAscArr     ; занесение в dx смещения переменной msgAscArr
    call DisplayMsg      ; вызов процедуры вывода сообщения (msgAscArr)
    call DisplayArr      ; вызов процедуры вывода массива

    mov ah,4ch           ; завершение работы программы, возврат в DOS
    int 21h              ; вызов прерывания 21h
    
; процедура SortArray
    SortArray proc
        mov cx,arrLen    ; занесение с cx размера массива

    outer_loop:          ; начало внешнего цикла
        mov ax,cx        ; копирование содержимого cx в ax
        push cx          ; занесение в стек значения cx
        mov cx,ax        ; восстановление содержимого ax в cx
        mov i,arrLen - 1 ; начальное значение параметра внутреннего цикла (i)
    inner_loop:          ; начало внутреннего цикла
        mov si,i         ; занесение в si индекса текущего элемента массива
        mov al,arr[si]   ; занесение в al текущего элемента массива
        mov bl,arr[si+1] ; занесение в bl следующего элемента массива
        cmp al,bl        ; сравнение значений элементов массива
        jg exchange      ; если текущий элемент массива больше следующего,
                         ; то переход на метку exchange
    go_on:               ; метка продолжения цикла после сравнения элементов
        dec i            ; декремент значения параметра внутреннего цикла
        dec cx           ; декремент cx
        jnz inner_loop   ; переход к следующей итерации внутреннего цикла
        pop cx           ; извлечение из стека значения в cx
        dec cx           ; декремент cx
        jnz outer_loop   ; переход к следующей итерации внешнего цикла
        jmp finish       ; переход на метку finish

    exchange:            ; метка обмена местами элементов массива
        mov arr[si],bl   ; на место текущего элемента массива ставится следующий
        mov arr[si+1],al ; на место следующего элемента массива ставится текущий
        jmp go_on        ; переход на метку go_on

    finish:              ; метка окончания сортировки
        xor cx,cx        ; обнуление используемых в процедуре
        xor ax,ax        ; регистров (cx, ax, si, al, bl)
        xor si,si
        xor al,al
        xor bl,bl
        ret              ; возврат из процедуры
    SortArray endp
; конец процедуры SortArray

; процедура DisplayArr
    DisplayArr proc
        mov cx,arrLen    ; занесение с cx размера массива
        mov si,0         ; занесение в si индекса первого элемента массива
        
    foreach:             ; начало цикла
        mov dl,arr[si]   ; занесение в dl текущего элемента массива
        add dl,30h       ; добавление числа 30 для вывода элемента массива
        mov ah,02h       ; занесение в ah функции 2
        int 21h          ; вызов прерывания 21h, вывод элемента массива
        mov ax,cx        ; копирование в ax текущего значения счетчика цикла
        sub ax,1         ; после последнего элемента массива разделитель ->
        jz last_item     ; -> не выводится, переход на метку last_item
        lea dx,separator ; занесение в dx смещения переменной разделителя (",")
        mov ah,09h       ; занесение в ah функции 9
        int 21h          ; вызов прерывания 21h, вывод разделителя элементов
        inc si           ; увеличение индекса
    last_item:           ; метка окончания цикла
        loop foreach     ; цикл будет выполнен arrLen раз

        xor cx,cx        ; обнуление используемых в процедуре
        xor si,si        ; регистров (cx, si, dl, ah, ax, dx)
        xor dl,dl
        xor ah,ah
        xor ax,ax
        xor dx,dx
        ret              ; возврат из процедуры
    DisplayArr endp
; конец процедуры DisplayArr

; процедура DisplayMsg
    DisplayMsg proc
        mov ah,09h       ; занесение в ah функции 9
        int 21h          ; вызов прерывания 21h, вывод информации
        xor dx,dx        ; обнуление используемых в процедуре
        xor ah,ah        ; регистров (dx, ah)
        ret              ; возврат из процедуры
    DisplayMsg endp
; конец процедуры DisplayMsg

; процедура NewLine
    NewLine proc
        mov dl,offset br ; занесение в dl смещения переменной перевода строки
        mov ah,09h       ; занесение в ah функции 9
        int 21h          ; вызов прерывания 21h, перевод строки
        xor dl,dl        ; обнуление используемых в процедуре
        xor ah,ah        ; регистров (dl, ah)
        ret              ; возврат из процедуры
    NewLine endp
; конец процедуры NewLine

end main                 ; конец программы с точкой входа main